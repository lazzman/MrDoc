# coding:utf-8
"""
Django settings for MrDoc project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from configparser import ConfigParser,RawConfigParser
from loguru import logger

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 配置文件和数据文件目录
CONFIG_DIR = os.path.join(BASE_DIR, 'config')
CONFIG = ConfigParser()
CONFIG.read(os.path.join(CONFIG_DIR,'config.ini'),encoding='utf-8')

# 日志文件配置
LOG_DIR = os.path.join(BASE_DIR,'log')

if os.path.exists(LOG_DIR) is False:
    os.makedirs(LOG_DIR)

logger.add(
    os.path.join(LOG_DIR,'{time:error.YYYY-MM-DD}.log'),
    rotation='1 days',
    retention='30 days',
    encoding='utf-8'
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '5&71mt9@^58zdg*_!t(x6g14q*@84d%ptr%%s6e0l50zs0we3d'

MRDOC_CRYPTO_KEY = os.getenv('MRDOC_CRYPTO_KEY', None)
if MRDOC_CRYPTO_KEY is None:
    CRYPTO_KEY = CONFIG.get('site','crypto_key',fallback='i8wVMM2WxTXGK8wdKV4_WBP1syNPdNVRfdG7bVoTtoM=')
else:
    CRYPTO_KEY = MRDOC_CRYPTO_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = CONFIG.getboolean('site','debug',fallback=False)

VERSIONS = '0.9.7'

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack', # 全文搜索
    'app_admin', # 管理APP
    'app_doc', # 文档APP
    'app_api', # API APP
    'app_ai',
    'django.contrib.sitemaps', # 站点地图
    'rest_framework',
    'corsheaders',
]

# 忽略浏览器的Accept-Language，强制使用设置的语言
LANGUAGE_FORCE = CONFIG.getboolean('locale','force',fallback=False)

if LANGUAGE_FORCE:
    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.locale.LocaleMiddleware',
        'app_admin.middleware.language.ForceDefaultLanguageMiddleware', # 强制使用设置的语言包
        'corsheaders.middleware.CorsMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        'app_admin.middleware.require_login_middleware.RequiredLoginMiddleware',
    ]
else:
    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.locale.LocaleMiddleware',
        'corsheaders.middleware.CorsMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        'app_admin.middleware.require_login_middleware.RequiredLoginMiddleware',
    ]

ROOT_URLCONF = 'MrDoc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,'template')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.i18n',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app_admin.context_processors.sys_setting', # 自定义系统设置上下文渲染
            ],
            'libraries': { # 自定义的模板标签
                'doc_filter' : 'app_doc.templatetags.doc_filter',
                'project_filter' : 'app_doc.templatetags.project_filter',
            },
        },
    },
]

WSGI_APPLICATION = 'MrDoc.wsgi.application'


# Database
# 数据库配置
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASE_MAP = {
    'sqlite':'django.db.backends.sqlite3',
    'mysql':'django.db.backends.mysql',
    'postgresql':'django.db.backends.postgresql_psycopg2',
    'oracle':'django.db.backends.oracle',
}

db_engine = CONFIG.get('database','engine',fallback='sqlite')
if db_engine == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': DATABASE_MAP[db_engine],
            'NAME': os.path.join(CONFIG_DIR, 'db.sqlite3'),
            'OPTIONS':{
                'timeout':20,
            }
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': DATABASE_MAP[CONFIG['database']['engine']],
            'NAME': CONFIG['database']['name'],
            'USER': CONFIG['database']['user'],
            'PASSWORD': CONFIG['database']['password'],
            'HOST': CONFIG['database']['host'],
            'PORT': CONFIG['database']['port'],
        }
    }

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 缓存配置
CACHE_MAP = {
    'memcached':'django.core.cache.backends.memcached.PyMemcacheCache',
    'redis':'django.core.cache.backends.redis.RedisCache',
    'database':'django.core.cache.backends.db.DatabaseCache',
    'filebase':'django.core.cache.backends.filebased.FileBasedCache',
    'locmem': 'django.core.cache.backends.locmem.LocMemCache'
}
CACHES = {
    "default": {
        "BACKEND": CACHE_MAP[CONFIG.get('cache','backend',fallback='locmem')],
        "LOCATION": CONFIG.get('cache','location',fallback='unique-snowflake'),
        "KEY_PREFIX":'mrdoc'
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
LOGIN_URL = 'login'

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = CONFIG.get('locale','language',fallback='zh-hans')

TIME_ZONE = CONFIG.get('local','timezone', fallback='Asia/Shanghai')

USE_I18N = True

USE_L10N = True

USE_TZ = False

# 多语言配置
LANGUAGES = (
    ('zh-hans',('中文简体')),
    ('zh-hant',('中文繁體')),
    ('en',('english')),
)
# 翻译文件
LOCALE_PATHS = (
    os.path.join(BASE_DIR,'locale'),
)

# Session 会话配置
SESSION_COOKIE_AGE = int(CONFIG.get('session','cookie_age',fallback=604800)) # 会话过期时间，秒数

SESSION_EXPIRE_AT_BROWSER_CLOSE = CONFIG.getboolean('session','browser_close',fallback=False) # 浏览器关闭即关闭会话

SESSION_COOKIE_SECURE = CONFIG.getboolean('session','cookie_secure',fallback=False) # 安全Cookie状态

SESSION_COOKIE_HTTPONLY = CONFIG.getboolean('session','cookie_httponly',fallback=True)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
if DEBUG:
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
    STATICFILES_DIR = os.path.join(BASE_DIR, 'static')
else:
    STATIC_ROOT = os.path.join(BASE_DIR,'static')

# 媒体文件
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')
if os.path.exists(MEDIA_ROOT) is False:
    os.mkdir(MEDIA_ROOT)

# 允许上传的图片后缀
ALLOWED_IMG = CONFIG.get("image_upload","suffix_name",fallback="jpg,jpeg,gif,png,bmp,webp").split(",")

# 附件格式验证
CHECK_ATTACHMENT_SUFFIX = CONFIG.getboolean('attachment_suffix','is_enable',fallback=True)

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# 全文检索配置
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh引擎
        'ENGINE': 'app_doc.search.whoosh_cn_backend.WhooshEngine',
        # 索引文件路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# 自定义高亮
HAYSTACK_CUSTOM_HIGHLIGHTER = "app_doc.search.highlight.MyHighLighter"

# Selenium 调用的driver类型 默认为Chromium
CHROMIUM_DRIVER = CONFIG.get('selenium','driver',fallback='CHROMIUM')
CHROMIUM_DRIVER_PATH = CONFIG.get('selenium','driver_path',fallback=None)

INTERNAL_IPS = ('127.0.0.1', '::1')
# Django Debug Toolbar 工具，站点开启调试的时候启用
try:
    import debug_toolbar.settings  # noqa
    if DEBUG:
        INSTALLED_APPS.append('debug_toolbar.apps.DebugToolbarConfig')
        MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
        DEBUG_TOOLBAR_PATCH_SETTINGS = False
        DEBUG_TOOLBAR_CONFIG = {
            'JQUERY_URL': '',
            'DISABLE_PANELS': debug_toolbar.settings.PANELS_DEFAULTS,
        }

    pass
except ImportError:
    pass

X_FRAME_OPTIONS = CONFIG.get("x_frame","option",fallback='SAMEORIGIN')

SECURE_CROSS_ORIGIN_OPENER_POLICY = 'None'

DATA_UPLOAD_MAX_MEMORY_SIZE = None

# CSRF 可信来源
csrf_str = CONFIG.get("csrf_origin","allow",fallback=[])
if csrf_str == []:
    CSRF_TRUSTED_ORIGINS = csrf_str
else:
    CSRF_TRUSTED_ORIGINS = csrf_str.split(',')

# 跨域请求配置
cors_str = CONFIG.get("cors_origin","allow",fallback=[])
capacitor_origins = ['http://localhost','capacitor://localhost','app://obsidian.md']
if cors_str == []:
    CORS_ALLOWED_ORIGINS = capacitor_origins
else:
    CORS_ALLOWED_ORIGINS = capacitor_origins + cors_str.split(',')

from corsheaders.defaults import default_headers
CORS_ALLOW_HEADERS = list(default_headers) + [
    "token",
    'access-control-allow-origin',
]

# 附件预览
# LibreOffice 路径
LIBREOFFICE_PATH = CONFIG.get('preview','libreoffice_path',fallback='soffice')
# LibreOffice预览格式
PREVIEW_SUFFIX_OFFICE = ['opt','csv','doc','docx','odp','ods','ppt','pptx','tsv','wps','xls','xlsx','txt']
# 附件预览格式
DEFAULT_ATTACHMENT_PREVIEW_SUFFIX = ['pdf','mp4','flv','docx','xlsx','xls','csv','zip']

# sitemap 站点地图
SITEMAP = CONFIG.getboolean('sitemap','status',fallback=True)

# 自定义文本文件显示
extend_root_txt = CONFIG.get("extend_root_txt","filename",fallback=[])
if extend_root_txt == []:
    EXTEND_ROOT_TXT = extend_root_txt
else:
    EXTEND_ROOT_TXT = extend_root_txt.split(',')

# 文档树层级配置
DOC_TREE_CONFIG = {
    'max_depth': 10,              # 硬性限制（技术上限）
    'recommended_depth': 6,       # 推荐最大层级
    'default_expand_depth': 3,    # 默认展开层级
    'warn_on_deep_level': True,   # 超过推荐层级时显示警告
    'enable_loop_detection': True,# 启用循环引用检测
}